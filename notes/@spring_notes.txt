1. spring IoC - inversion of control
2. spring container is the heart of Spring framework
	a. receives metadata from a XML file, Java annotations or Java Code
	b. gets its instructions on what objects to instantiate, configure and assemble (the created objects are the Spring beans)
3. spring bean
	a. java objects which are managed by spring container
	b. scope (= lifecycle + visibility)
		- singleton
			+ single instance of that bean
			+ all requests for that bean will return the same object
		- prototype
			+ different instance of that bean
			+ all requests for that bean will return a different object
		- request
			+ specific for a single HTTP request
		- session
			+ specific for a single HTTP session
		- application
			+ specific for the lifecycle of a ServletContext
		- websocket
			+ specific for a single WebSocket session
4. dependency injection
	a. is a pattern which implements IoC
	b. the act of injecting objects into other objects is done by Spring Container rather than by object themselves
	a. can be done through:
		- constructors
		- setters
		- fields (not recomended because of reflection which is costly)

5. wiring
	a. @Autowired
		- injection by 
			+ fields
			+ setters
			+ constructors
		- order of precedence
			+ type
			+ qualifier
			+ name
	b. @Resource = @Autowired + @Qualifier
		- injection by
			+ fields
			+ setters
		- order of precedence
			+ name
			+ type
			+ qualifier
	c. @Inject
		- type
		- qualifier
		- name

@SpringBootApplication - marks the main class of a Spring Boot App (@Configuration + @EnableAutoConfiguration + @ComponentScan)
@Configuration - source of bean definitions
@EntityScan - specify to Spring where our JPA entities packages are
@ComponentScan - specify to Spring where our other Spring components are (controllers, services, etc.)
@EnableJpaRepositories - specify to Spring where our JPA repositories are
@Value - takes a value from application.properties and injects it into a variable
@GetMapping - GET request
@PostMapping - POST request
@PutMapping - PUT request
@DeleteMapping - DELETE request
@ResponseStatus - HTTP status to be returned by the service regarding its execution
@ResponseBody - the response to be returned to the client is automatically serialized into JSON
@RequestBody - the response received from client is mapped to an according object implicitly
@EnableAutoConfiguration - specify Spring to auto-scan for Components, Configurations, Services, Repositories and so on
@RestController = @Controller + @ResponseBody
@ControllerAdvice - error handling for all controllers by default
@ExceptionHandler - handle specific exception and display it to the caller in a customized way (view)
@Conditional   |
			   | - load a configuration based on a condition
@ConditionalOn |
@Qualifier - referencing a bean by name (if there is more than one bean of the same type)
@Order - inject the beans of the same type based on their order value
@ConfigurationProperties(prefix = "test") - injects all "test" prefixed properties from application.properties inside the members of this class
@PropertySource - specify a properties file application.properties explicitly
@TestPropertySource - specify a properties file application.properties explicitly for test purpose only
					- specify properties directly using key=value convention for test purpose only

Spring Actuator 
1. exposes operational info about the running app (/health, /metrics, /info, dump, env, etc.)
@Endpoint - create your own custom indicator
@EndPointExtension - extend a predefined endpoint

Spring AOP
1. motivation: increase modularity by allowing the separation of cross-cutting concerns
2. concepts:
	a. Join Point
		- a point during an execution of a script (method, property access, etc.)
	b. Pointcut
		- a regular expression that matches join points
	c. Advice
		- action taken by an aspect at a particular join point
		- @Before
		- @After 
		- @After returning
		- @After rethrowing
		- @Around

Spring profiles
1. brings profile-specific property files
2. @Profile(name) to a bean or any other component will enable that bean/component to be available only when 'name' profile is active
3. How to set active profile(s):
	a. programmatically via WebApplicationInitializer interface
	b. programmatically via ConfigurableEnvironment
	c. context param in web.xml
	d. JVM system params
	e. env variable
	f. maven profile
	g. @ActiveProfile in Tests