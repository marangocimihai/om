@Entity = POJO class
@Table(name = "employee") = current POJO class which corresponds to a table with the name 'employee'
@Cacheable = the current entity is able to use the second level cache
@Id = identify the field as id
@GeneratedValue(strategy = GenerationType.IDENTITY) = the current field is automatically generated by the database (in the same table)
@Column(name = "id", nullable = false, updatable = false) = the column which the current field correspond to
@NamedQuery(query = "Select e from Employee e where e.id = :id", name = "Employee.findById") = a query which can be invoked for the entity that belongs to using Employee.findById identifier
@CreationTimestamp = timestamp regarding the creation of the record in the database
@UpdateTimestamp = timestamp regarding the update of the record in the database
@Inheritance(strategy = InheritanceType.SINGLE_TABLE | .JOINED | .TABLE_PER_CLASS):
	1. SINGLE_TABLE (3 entities: A, B and C -> B extends A -> C extends A)
		a. one table for all entities
		b. might contain null values because, for example, some properties of A could not be valid for B and vice-versa
		c. inside A
			- @InheritanceType(strategy=InheritanceType.SINGLE_TABLE)
			- @DiscriminatorColumn(name="type")
		d. inside B
			- @DiscriminatorColumn("B")
		e. inside C
			- @DiscriminatorColumn("C")
	2. JOINED (3 entities: A, B and C -> B extends A -> C extends A)
		a. a table for each entity
		b. the only common column is the ID for obvious further joining reason
		c. inside A
			- @InheritanceType(strategy=InheritanceType.JOINED)
		d. inside B: nothing
		e. inside C: nothing
	3. TABLE_PER_CLASS (3 entities: A, B and C -> B extends A -> C extends A)
		a. a table for each child-entity (so only B and C)
		b. each table will contain its own correspondent info from parent entity (A)
		c. inside A:
			- @InheritanceType(strategy=InheritanceType.TABLE_PER_CLASS)
@OneToOne
	1. two entities: A and B
	2. inside A:
		a. @OneToOne(mappedBy="A") to B instance
		b. @PrimaryKeyJoinColumn
	3. inside B:
		a. @OneToOne() to A instance
@OneToMany
	1. two entities A and B
	2. inside A:
		a. @OneToMany(mappedBy="A") to B instance
	1. inside B:
   		a. @ManyToOne
   		b. @JoinColumn(name="a_id") to A instance
@ManyToMany
	1. two entities: A and B
	2. inside A:
		a. @ManyToMany(targetEntity = B.class)
		b. @JoinTable(name = "a_items",
					 joinColumns = {@JoinColumn(name="a_id")},
					 inverseJoinColumns = {@JoinColumn(name="b_id")})
		c. the idea on ManyToMany relationship is that a new table with 2 columns will be created, which will contain the primary key of the first entity (joinColumns) and the primary key of second entity (inverseJoinColumns)
	3. inside B: nothing
@find() = returns the object fetching it firstly from the cache then from the database
@getReference() = returns the reference of an object that might not exist (a proxy object); loads the data from cache/database only when you access other properties of the object
@manager.find(Entity.class, id) = find entity in database with id = id
@manager.persist(entity) = add entity to database
@manager.remove(entity) = remove entity from database
@manager.merge(entity) = update entity in database
@MappedSuperclass = will not be persisted in the database; acts like a simple parent class for the classes that extend it
@Embeddable = a class which can be a field of other's
@Embedded = the field is an embeddable type
@UniqueConstraint = only one kind of a value/pair of values can be injected into the database (i.e.: if you already have an EMPLOYEE_NAME = MIHAI in the database, and you try to insert a new employee with the same name (MIHAI), it will throw an error - same with combinations of columns)
@MapKey(name = [COLUMN-NAME]) = when using a map, we need to associate at least two entities. So, for example if we have a OneToMany <-> ManyToOne relationship, we could define a map inside the OneToMany entity to have multiple instances of ManyToOne entity, maping the id of each entity, so they could be identified in the map where Hibernate is going to inject them
