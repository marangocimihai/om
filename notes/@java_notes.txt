OOP PRINCIPLES
1. Encapsulation
	a. wrapping data and methods within the class in combination with implementation hiding (through access control)
	b. information hiding - through access control modifiers
		- private field
		- public setter for retrieving the private field
	c. implementation hiding - through interfaces
2. Abstraction
	a. hides information not relevant to context
	b. extension of encapsulation
3. Inheritance
	a. code reusability
4. Polymorphism
	a. types:
		- compile time polymorphism
			+ method overloading
				* methods may have the same name, but their count or types must be different
		- runtime polymorphism
			+ method overriding

SOLID
S = single responsibility
	a. one class should have only one responsibility
	b. we have 2 classes, Person and Account
		- if we want to change the state of Person class, we do not need to modify Account class and vice-versa
O = open-closed
	a. opened for extension, closed for modification
L = Liskov substitution
	a. derived types must be completely substituable for their base types
I = interface segregation 
	a. clients should not be forced to depend on methods he does not use
	b. use-case:
		- a developer created Reportable interface having two methods: generateExcel() and generatePdf()
		- a client wants to use this interface, but he intends to use only the generatePdf() functionality
		- issue: the client is obliged to have the generateExcel() as well, even if he does not need it
		- solution: create 2 other interfaces: ReportableExcel and ReportablePdf
D = dependency inversion 
	a. high level modules do not depend on low level modules
	b. abstractions should not depend on details, but viceversa
	c. best example: bean configuration in Spring
---------------------------------

ACID
A = Atomicity
C = Consistency
I = Isolation
D = Durability
---------------------------------

JAVA - ACCESS CONTROL MODIFIERS
1. default - scope: same package
2. public - scope: everywhere
3. protected - scope: within the package & subclasses
4. private - scope: within the class
-------------------------------------------

JAVA - NON-ACCESS MODIFIERS
1. Final
2. Static
3. Transient
4. Synchronized
5. Volatile

FINAL
 - used with variable, method or class
 - final method cannot be overriden, but can be used in subclass
 - final class cannot be inherited (i.e.: String)

 STATIC:
 - can be accessed without instance of a class (i.e.: Employee.COMPANY_NAME)
 - allocated memory only once (saves memory)
 - all instances of a class will use the same reference of a static variable

 TRANSIENT
 - not serializable

 SYNCHRONIZED
 - access permited only by one thread at a time

 VOLATILE
 - tells the compiler that a variable can be changed unexpectedly
 - only used with variables
 --------------------------------

 INSTANCEOF
 - used to determine the type of an object
 - if a extends b => b instance of a == true
 ------------------------------------

 STRING
 - immutable - state cannot be changed
 - everytime you create a new String (either by "" or using new operator) the JVM checks the String Pool first -> 
 	a. if the String exists in the String Pool, it returns the reference to it
 	b. if the String does not exists in the String Pool, it creates a new object in memory and places it in the pool as well for further use
 - COMPARISONS:
 	a. equals() = compares content
 	b. compareTo() = compares content
 	c. == - compares references
------------------------------------------------------------
															|
STRINGBUFFER                                                | 
- mutable - state can be changed                            |  
- used when we perform a lot of modifications to our string |  
- thread-safe                                               |     
- has reverse() function                                    |  => StringBuffer is slower than StringBuilder due to synchronization
                                                            |  
STRINGBUILDER                                               |  
- mutable - state can be changed                            |
- used when we perform a lot of modifications to our string |
- NOT THREAD-SAFE (because of its methods)                  |
-------------------------------------------------------------

EXCEPTIONS
1. Checked - checked at compile time (i.e.: FileNotFoundException)
2. Unchecked - checked at runtime (i.e.: NullPointerException, ArrayIndexOutOfBound)
3. Inner tries are allowed. They make use of its own catch() clauses as well as the outer catch() clauses, should the need arise
-------------------------------------------------------------

THREADS
1. Lifecycle:
	a. New
	b. Runnable
		i. by calling start() when in New state
	c. Running
	4. Waiting 
		i. still alive
		ii. waiting for another thread to perform a task
	5. Terminated
		i. when it completes its task
2. Priorities:
	a. MIN-PRIORITY == 1
	b. MAX-PRIORITY == 10
	c. NORM-PRIORITY == 5 (assigned by default to every thread)
3. How to create a thread:
	a. extending Thread class
	b. implementing Runnable interface
4. start() 
	a. starts a thread (which firstly provides a new stack to the thread, and secondly calls run() method)
	b. if you call run() method directly, there will be no stack provided to the thread, therefore the thread will run in the current stack, which belongs to the main thread
5. join()
	a. waits until thread terminates
6. synchronized keyword - resource (method, field) can be accessed only by one thread at a time
7. synchronized block - used when you want to synchronize access to an object / part of a method
8. deadlock - no thread can complete its execution because resources are locked (i.e.: T1 holds a but needs b; T2 holds b but needs a)
--------------------------------------------------------

ABSTRACT CLASS VS. INTERFACE
1. an abstract class lets its methods have bodies, whereas interfaces do not
2. an abstract class is a real class, whereas an interface is an empty template
3. an abstract class allows access modifiers (because it is a real class), whereas interfaces do not (everything is declared as public by default)
4. an abstract class could be inherited by a class once at a time, whereas multiple interfaces could be implemented by a class
--------------------------------------------------------

WRAPPERS:
1. Types
	a. Character
	b. Boolean
	c. Numeric:
		+ Byte
		+ Short
		+ Integer
		+ Long
		+ Float
		+ Double
2. Autoboxing = primitive encapsulated into its Wrapper
3. Auto-unboxing = primitive extracted from its Wrapper
4. d = Integer i + Double d (phases)
	a. Auto-unboxing of i into int
	b. Auto-unboxing of d into double
	c. Perform the addition
	d. Autoboxing of d into Double
---------------------------------------------------------

SERIALIZATION / DESERIALIZATION
1. serialization - convert an object into a sequence of bytes
2. deserialization - convert a sequence of bytes into an object
3. ObjectOutputStream: 
	a. writeObject()
	b. readObject()
4. Static fields do no get serialized (they belong to the class, not the object)

---------------------------------------------------------

GENERICS
1. available with classes, interfaces and methods
2. provides type-safety
3. work only with objects (not primitives)
---------------------------------------------------------

COLLECTIONS:
1. Collection (I)
	a. Set (I)
		+ Hashset (C)
		+ LinkedHashSet (C)
		+ SortedSet (I)
			+ TreeSet (C)
	b. List (I)
		+ LinkedList  (C)
		+ ArrayList (C)
		+ Vector (C)
	c. Queue (I)
		+ LinkedList (C)
		+ PriorityQueue (C)

2. Map (I)
	a. HashTable (C)
	b. LinkedHashMap (C)
	c. HashMap (C)
	d. SortedMap (I)
		+ TreeMap (C)

3. List
	a. random access and insertion, based on position
	b. allows duplicates
	c. additional methods:
		+ get(index)
		+ set(index, obj)
		+ indexOf(obj)
		+ subList(start, end)

4. Set
	a. does not allow duplicates
	b. subinterface SortedSet arranges elements in natural order

5. Queue
	a. follows FIFO principle
	b. additional methods:
		+ poll()
			- removes head element
			- returns null if queue is empty
		+ remove()
			- removes head element
			- returns NoSuchElementException if queue is empty
		+ peek()
			- returns head element (without removing)
			- returns null if queue is empty
		+ element()
			- return head element (without removing)
			- returns NoSuchElementException if queue is empty
		+ offer()
			- adds object to the queue

6. ArrayList
	a. dynamic size
	b. slow manipulation due to the need of a lot of shifting if removing an element
	c. random access
	d. not synchronized
	e. maintains insertion order

7. LinkedList (List, Queue, Stack)
	a. dynamic in nature - allocates memory when required
	b. fast manipulation due to the no need of shifting
	c. sequential access
	d. not synchronized
	e. difficult reverse traversing

8. ArrayList vs. LinkedList
	a. ArrayList allows random access, LinkedList allows sequential access
	b. ArrayList access of elements is faster (random access), LinkedList slower (sequential access)
	c. ArrayList can only be a List, LinkedList can be a List, Queue or Stack
	d. both are not synchronized

9. HashSet
	a. uses hash table for storage
	b. no order

10. LinkedHashSet
	a. maintains insertion order
	b. maintains a LinkedList of entries

11. TreeSet
	a. ascending order (if no comparator)
	b. fast access of elements

12. PriorityQueue
	a. dynamic size
	b. ascending order (if no comparator)
	c. does not follow FIFO principle
---------------------------------------------------------

ITERATOR
1. Iterator
2. ListIterator
3. for-each loop
	a. for (String str : arrayOfStrings)
	b. arrayOfStrings.forEach(str -> ... )
---------------------------------------------------------

MAP
1. stores data in key and value association
2. keys must be unique, values can be duplicates

3. HashMap
	a. uses hashtable to store the map
	b. no order

4. TreeMap
	a. stores data in a tree structure
	b. provides efficient means of storing key/value pair in efficient order
	c. sorted order
	d. allows rapid retrieval

5. LinkedHashMap
	a. maintains insertion order (in a LinkedList)
	b. adds one method: removeEldestEntry() which can be overriden to remove the oldest element in the map
----------------------------------------------------------

DESIGN PATTERNS
1. Types:
	a. Creational (singleton, factory)
	b. Structural (adapter)
	c. Behavioral (observer)
2. Motivation:
	a. how to properly create a class
	b. how to instantiate an object
	c. how to interact between objects
	d. how to write loosely coupled code
	e. how to write reusable code

3. Singleton
	a. ensures that only one instance of the class exists in JVM
	b.  public class ThreadSafeSingleton {
		    private static ThreadSafeSingleton instance;
		    private ThreadSafeSingleton(){}
		    
		    public static synchronized ThreadSafeSingleton getInstance(){
		        if(instance == null) {
		            instance = new ThreadSafeSingleton();
		        }
		        return instance;
		    }  
		}

4. Factory
	a. code more robust, less coupled, easy to extend
	b.  public abstract class Computer {
			public abstract String getRAM();
			public abstract String getHDD();
			public abstract String getCPU();
			
			@Override
			public String toString(){
				return "RAM= "+this.getRAM()+", HDD="+this.getHDD()+", CPU="+this.getCPU();
			}
		}

		public class PC extends Computer {
			private String ram;
			private String hdd;
			private String cpu;
			
			public PC(String ram, String hdd, String cpu){
				this.ram=ram;
				this.hdd=hdd;
				this.cpu=cpu;
			}
			/*overriden getters and setters*/
		}

		public class Server extends Computer {
			private String ram;
			private String hdd;
			private String cpu;
			
			public Server(String ram, String hdd, String cpu){
				this.ram=ram;
				this.hdd=hdd;
				this.cpu=cpu;
			}
			/*overriden getters and setters*/
		}

		public class ComputerFactory {
			public static Computer getComputer(String type, String ram, String hdd, String cpu){
				if("PC".equalsIgnoreCase(type)) return new PC(ram, hdd, cpu);
				else if("Server".equalsIgnoreCase(type)) return new Server(ram, hdd, cpu);
				return null;
			}
		}

5. Adapter
	a. acts as a connector between two incompatible interfaces
	b.  public interface Movable {                      |            
		    // returns speed in MPH                     |
		    double getSpeed();                          |
	    }                                               |
                                                        |
	    public class BugattiVeyron implements Movable { | => original interface & its implementation
		    @Override                                   |
		    public double getSpeed() {                  |
		        return 268;                             |
		    }                                           |
		}                                               |

		public interface MovableAdapter {							|
		    // returns speed in KM/H 								|
		    double getSpeed();										|
		}															|
																	|
		public class MovableAdapterImpl implements MovableAdapter { |
		    private Movable luxuryCars;                             |
		    // standard constructors                                |
		    @Override                                               | => original interface & its implementation adaptation
		    public double getSpeed() {                              |
		        return convertMPHtoKMPH(luxuryCars.getSpeed());		|
		    }														|
		     														|
		    private double convertMPHtoKMPH(double mph) {			|
		        return mph * 1.60934;								|
		    }														|
		}															|

		@Test 																			 |	
		public void whenConvertingMPHToKMPH_thenSuccessfullyConverted() {				 |
		    Movable bugattiVeyron = new BugattiVeyron();								 | => concrete usage
		    MovableAdapter bugattiVeyronAdapter = new MovableAdapterImpl(bugattiVeyron); |
		    assertEquals(bugattiVeyronAdapter.getSpeed(), 431.30312, 0.00001);  		 |
		}																				 |

6. Observer
	a. public interface Subject {
			//methods to register and unregister observers
			public void register(Observer obj);
			public void unregister(Observer obj);
			
			//method to notify observers of change
			public void notifyObservers();
			
			//method to get updates from subject
			public Object getUpdate(Observer obj);
			
		}

		public interface Observer {
			//method to update the observer, used by subject
			public void update();
			
			//attach with subject to observe
			public void setSubject(Subject sub);
		}

		public class MyTopic implements Subject {
			private List<Observer> observers;
			private String message;
			private boolean changed;
			private final Object MUTEX= new Object();
			
			public MyTopic(){
				this.observers=new ArrayList<>();
			}
			@Override
			public void register(Observer obj) {
				if(obj == null) throw new NullPointerException("Null Observer");
				synchronized (MUTEX) {
				if(!observers.contains(obj)) observers.add(obj);
				}
			}

			@Override
			public void unregister(Observer obj) {
				synchronized (MUTEX) {
				observers.remove(obj);
				}
			}

			@Override
			public void notifyObservers() {
				List<Observer> observersLocal = null;
				//synchronization is used to make sure any observer registered after message is received is not notified
				synchronized (MUTEX) {
					if (!changed)
						return;
					observersLocal = new ArrayList<>(this.observers);
					this.changed=false;
				}
				for (Observer obj : observersLocal) {
					obj.update();
				}

			}

			@Override
			public Object getUpdate(Observer obj) {
				return this.message;
			}
			
			//method to post message to the topic
			public void postMessage(String msg){
				System.out.println("Message Posted to Topic:"+msg);
				this.message=msg;
				this.changed=true;
				notifyObservers();
			}

		}

		public class MyTopicSubscriber implements Observer {
			private String name;
			private Subject topic;

			public MyTopicSubscriber(String nm){
				this.name=nm;
			}
			@Override
			public void update() {
				String msg = (String) topic.getUpdate(this);
				if(msg == null){
					System.out.println(name+":: No new message");
				}else
				System.out.println(name+":: Consuming message::"+msg);
			}

			@Override
			public void setSubject(Subject sub) {
				this.topic=sub;
			}

		}

		public class ObserverPatternTest {
			public static void main(String[] args) {
				//create subject
				MyTopic topic = new MyTopic();
				
				//create observers
				Observer obj1 = new MyTopicSubscriber("Obj1");
				Observer obj2 = new MyTopicSubscriber("Obj2");
				Observer obj3 = new MyTopicSubscriber("Obj3");
				
				//register observers to the subject
				topic.register(obj1);
				topic.register(obj2);
				topic.register(obj3);
				
				//attach observer to subject
				obj1.setSubject(topic);
				obj2.setSubject(topic);
				obj3.setSubject(topic);
				
				//check if any update is available
				obj1.update();
				
				//now send message to subject
				topic.postMessage("New Message");
			}

		}
----------------------------------------------------------

.equals()
1. Must be:
	a. reflexive
	b. symmetric
	c. transitive
	d. consistent
----------------------------------------------------------

.hashCode()
1. Criterias:
	a. internal consistency
		- the value of hashCode() may only change if a property that is in equals() changes
	b. equals consistency
		- objects that are equal to each other must return the same hashCode
	c. collisions
		- unequal objects may have the same hashCode
----------------------------------------------------------

RESTFUL SERVICES
1. convention for building HTTP services
2. client-server based
3. uses HTTP protocol
5. stateless (server does not store client info in-between requests)
4. Cached
	a. if the same request is given to the server, it will go into the cache and get the required information
	b. reduces network traffic
5. HTTP methods:
	a. GET
		- idempotent
		- safe (because it does not modify the resource)
		- can be cached
	b. POST
		- not idempotent (result is not always the same)
		- not safe
	c. PUT
		- idempotent (result is always the same, no matter how many times of invoking)
		- not safe
	d. DELETE
		- idempotent
		- not safe
	e. HEAD
		- idempotent
		- safe
	f. PATCH
	 	- not idempotent
	 	- not safe