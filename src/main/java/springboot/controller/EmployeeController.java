package springboot.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;
import springboot.dao.EmployeeRepository;
import springboot.exception.EmployeeNotFoundException;
import springboot.model.Employee;

@RestController // This means that this class is a RestController
@RequestMapping(path = "/employee") // This means URL's start with /employee (after Application path)
public class EmployeeController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private EmployeeRepository employeeRepository;

    @ResponseStatus(HttpStatus.CREATED)
    @PostMapping(path = "/add", consumes = "application/json", produces = "application/json") // Map ONLY POST Requests
    public void addEmployee(@RequestBody Employee employee) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        this.employeeRepository.save(employee);
    }

    @ResponseBody
    @PostMapping(path = "/find/wage", consumes = "application/json", produces = "application/json")
    public Iterable<Employee> getByWage(@RequestBody Employee employee) {
        return employeeRepository.findByWage(employee.getWage());
    }

    @ResponseBody
    @GetMapping(path = "/find/all", produces = "application/json")
    public Iterable<Employee> getAll() {
        return employeeRepository.findAll();
    }

    @ResponseStatus(HttpStatus.OK)
    @PutMapping(path = "update/{id}", consumes = "application/json", produces = "application/json")
    public Employee update(@RequestBody Employee employee, @PathVariable Integer id) throws EmployeeNotFoundException {
        Employee emp = employeeRepository.findById(id).orElseThrow(EmployeeNotFoundException::new);
        return employeeRepository.save(employee);
    }

    @ResponseBody
    @DeleteMapping(path = "delete/id", consumes = "application/json", produces = "application/json")
    public void delete(@RequestBody Employee employee) throws EmployeeNotFoundException {
        employeeRepository.findById(employee.getId()).orElseThrow(EmployeeNotFoundException::new);
        employeeRepository.deleteById(employee.getId());
    }
}