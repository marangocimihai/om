package springboot.controller;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;
import springboot.dao.EmployeeDao;
import springboot.dto.EmployeeDto;
import springboot.exception.EmployeeNotFoundException;
import springboot.model.Employee;
import springboot.service.EmployeeService;

import java.text.ParseException;
import java.util.List;
import java.util.stream.Collectors;

@RestController // This means that this class is a RestController
@RequestMapping(path = "/employee") // This means URL's start with /employee (after Application path)
public class EmployeeController {
    @Autowired
    // This means to get the bean called userRepository, which is auto-generated by Spring, we will use it to handle the data
    private EmployeeDao employeeDao;

    @Autowired
    private EmployeeService employeeService;

    @Autowired
    private ModelMapper modelMapper;

    @ResponseStatus(HttpStatus.CREATED)
    @PostMapping(path = "/add", consumes = "application/json", produces = "application/json") // Map ONLY POST Requests
    public void create(@RequestBody Employee employee) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        this.employeeDao.save(employee);
    }

    @ResponseStatus(HttpStatus.OK)
    @PutMapping(path = "update/{id}", consumes = "application/json", produces = "application/json")
    public Employee update(@RequestBody Employee employee, @PathVariable Integer id) throws EmployeeNotFoundException {
        Employee emp = employeeDao.findById(id).orElseThrow(EmployeeNotFoundException::new);
        return employeeDao.save(employee);
    }

    @ResponseBody
    @DeleteMapping(path = "delete/id", consumes = "application/json", produces = "application/json")
    public void delete(@RequestBody Employee employee) throws EmployeeNotFoundException {
        employeeDao.findById(employee.getId()).orElseThrow(EmployeeNotFoundException::new);
        employeeDao.deleteById(employee.getId());
    }

    @ResponseBody
    @PostMapping(path = "/find/wage", consumes = "application/json", produces = "application/json")
    public Iterable<Employee> getByWage(@RequestBody Employee employee) {
        return employeeDao.findByWage(employee.getWage());
    }

    @ResponseBody
    @GetMapping(path = "/find/all", produces = "application/json")
    public Iterable<EmployeeDto> getAll() {
        List<Employee> employees = employeeService.getAll();
        return employees.stream().map(this::convertToDto).collect(Collectors.toList());
    }

    private EmployeeDto convertToDto(Employee employee) {
        return modelMapper.map(employee, EmployeeDto.class);
    }

    private Employee convertToEntity(EmployeeDto employeeDto) throws ParseException {
        Employee post = modelMapper.map(employeeDto, Employee.class);
        if (employeeDto.getId() != null) {
            Employee oldEmployee = employeeService.getById(employeeDto.getId());
            post.setName(oldEmployee.getName());
            post.setSurname(oldEmployee.getSurname());
            post.setWage(oldEmployee.getWage());
        }
        return post;
    }
}